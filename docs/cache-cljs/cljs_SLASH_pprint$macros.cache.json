["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$deftype","~$macroexpand"]],"~:name","~$cljs.pprint$macros","~:imports",null,"~:requires",["^ ","~$walk","~$clojure.walk","^<","^<","~$ana","~$cljs.analyzer","^>","^>"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","^6",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","~$cljs.pprint","~:line",83,"~:column",10,"~:end-line",83,"~:end-column",21,"~:arglists",["~#list",["~$quote",["^K",[["~$env","~$form"]]]]]],"^7","~$cljs.pprint$macros/macroexpand","~:variadic",false,"^D","cljs/pprint.cljc","^I",21,"~:method-params",["^K",[["^M","^N"]]],"~:protocol-impl",null,"~:arglists-meta",["^K",[null,null]],"^G",4,"^F",83,"^H",83,"~:max-fixed-arity",2,"~:fn-var",true,"^J",["^K",["^L",["^K",[["^M","^N"]]]]]],"~$parse-lb-options",["^ ","^B",null,"^C",["^ ","^D","^E","^F",51,"^G",8,"^H",51,"^I",24,"~:private",true,"^J",["^K",["^L",["^K",[["~$opts","~$body"]]]]]],"^W",true,"^7","~$cljs.pprint$macros/parse-lb-options","^P",false,"^D","cljs/pprint.cljc","^I",24,"^Q",["^K",[["^X","^Y"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",51,"^H",51,"^T",2,"^U",true,"^J",["^K",["^L",["^K",[["^X","^Y"]]]]]],"^5",["^ ","^B",null,"^C",["^ ","^D","^E","^F",40,"^G",11,"^H",40,"^I",18,"~:macro",true,"^J",["^K",["^L",["^K",[["~$type-name","~$&","~$fields"]]]]],"~:top-fn",["^ ","^P",true,"^T",3,"^Q",[["^K",["~$&form","~$&env","^10","^11"]]],"^J",["^K",[["^13","^14","^10","~$&","^11"]]],"^S",["^K",[null]]]],"^7","~$cljs.pprint$macros/deftype","^P",true,"^D","cljs/pprint.cljc","^I",18,"^12",["^ ","^P",true,"^T",3,"^Q",[["^K",["^13","^14","^10","^11"]]],"^J",["^K",[["^13","^14","^10","~$&","^11"]]],"^S",["^K",[null]]],"^Q",[["^K",["^13","^14","^10","^11"]]],"^R",null,"^S",["^K",[null]],"^G",1,"^F",40,"^[",true,"^H",40,"^T",3,"^U",false,"^J",["^K",[["^13","^14","^10","~$&","^11"]]]],"~$print-length-loop",["^ ","^B",null,"^C",["^ ","^D","^E","^I",28,"^12",["^ ","^P",true,"^T",3,"^Q",[["^K",["^13","^14","~$bindings","^Y"]]],"^J",["^K",[["^13","^14","^17","~$&","^Y"]]],"^S",["^K",[null]]],"^G",11,"^F",102,"^[",true,"^H",102,"^J",["^K",["^L",["^K",[["^17","~$&","^Y"]]]]],"~:doc","A version of loop that iterates at most *print-length* times. This is designed\n  for use in pretty-printer dispatch functions."],"^7","~$cljs.pprint$macros/print-length-loop","^P",true,"^D","cljs/pprint.cljc","^I",28,"^12",["^ ","^P",true,"^T",3,"^Q",[["^K",["^13","^14","^17","^Y"]]],"^J",["^K",[["^13","^14","^17","~$&","^Y"]]],"^S",["^K",[null]]],"^Q",[["^K",["^13","^14","^17","^Y"]]],"^R",null,"^S",["^K",[null]],"^G",1,"^F",102,"^[",true,"^H",102,"^T",3,"^U",false,"^J",["^K",[["^13","^14","^17","~$&","^Y"]]],"^18","A version of loop that iterates at most *print-length* times. This is designed\n  for use in pretty-printer dispatch functions."],"~$defdirectives",["^ ","^B",null,"^C",["^ ","^W",true,"^D","^E","^I",16,"^12",["^ ","^P",true,"^T",2,"^Q",[["^K",["^13","^14","~$directives"]]],"^J",["^K",[["^13","^14","~$&","^1;"]]],"^S",["^K",[null]]],"^G",3,"^F",122,"^[",true,"^H",122,"^J",["^K",["^L",["^K",[["~$&","^1;"]]]]]],"^W",true,"^7","~$cljs.pprint$macros/defdirectives","^P",true,"^D","cljs/pprint.cljc","^I",16,"^12",["^ ","^P",true,"^T",2,"^Q",[["^K",["^13","^14","^1;"]]],"^J",["^K",[["^13","^14","~$&","^1;"]]],"^S",["^K",[null]]],"^Q",[["^K",["^13","^14","^1;"]]],"^R",null,"^S",["^K",[null]],"^G",1,"^F",121,"^[",true,"^H",122,"^T",2,"^U",false,"^J",["^K",[["^13","^14","~$&","^1;"]]]],"~$pll-mod-body",["^ ","^B",null,"^C",["^ ","^D","^E","^F",90,"^G",8,"^H",90,"^I",20,"^W",true,"^J",["^K",["^L",["^K",[["^M","~$var-sym","^Y"]]]]]],"^W",true,"^7","~$cljs.pprint$macros/pll-mod-body","^P",false,"^D","cljs/pprint.cljc","^I",20,"^Q",["^K",[["^M","^1>","^Y"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",90,"^H",90,"^T",3,"^U",true,"^J",["^K",["^L",["^K",[["^M","^1>","^Y"]]]]]],"~$getf",["^ ","^B",null,"^C",["^ ","^D","^E","^F",28,"^G",11,"^H",28,"^I",15,"^[",true,"^J",["^K",["^L",["^K",[["~$sym"]]]]],"^18","Get the value of the field a named by the argument (which should be a keyword)."],"^7","~$cljs.pprint$macros/getf","^P",false,"^D","cljs/pprint.cljc","^I",15,"^Q",["^K",[["^13","^14","^1A"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",28,"^[",true,"^H",28,"^T",3,"^U",false,"^J",["^K",["^L",["^K",[["^1A"]]]]],"^18","Get the value of the field a named by the argument (which should be a keyword)."],"~$pprint-logical-block",["^ ","^B",null,"^C",["^ ","^D","^E","^I",31,"^12",["^ ","^P",true,"^T",2,"^Q",[["^K",["^13","^14","~$args"]]],"^J",["^K",[["^13","^14","~$&","^1D"]]],"^S",["^K",[null]]],"^G",11,"^F",58,"^[",true,"^H",58,"^J",["^K",["^L",["^K",[["~$&","^1D"]]]]],"^18","Execute the body as a pretty printing logical block with output to *out* which\n  must be a pretty printing writer. When used from pprint or cl-format, this can be\n  assumed.\n\n  This function is intended for use when writing custom dispatch functions.\n\n  Before the body, the caller can optionally specify options: :prefix, :per-line-prefix\n  and :suffix."],"^7","~$cljs.pprint$macros/pprint-logical-block","^P",true,"^D","cljs/pprint.cljc","^I",31,"^12",["^ ","^P",true,"^T",2,"^Q",[["^K",["^13","^14","^1D"]]],"^J",["^K",[["^13","^14","~$&","^1D"]]],"^S",["^K",[null]]],"^Q",[["^K",["^13","^14","^1D"]]],"^R",null,"^S",["^K",[null]],"^G",1,"^F",58,"^[",true,"^H",58,"^T",2,"^U",false,"^J",["^K",[["^13","^14","~$&","^1D"]]],"^18","Execute the body as a pretty printing logical block with output to *out* which\n  must be a pretty printing writer. When used from pprint or cl-format, this can be\n  assumed.\n\n  This function is intended for use when writing custom dispatch functions.\n\n  Before the body, the caller can optionally specify options: :prefix, :per-line-prefix\n  and :suffix."],"~$pp",["^ ","^B",null,"^C",["^ ","~:added","1.2","^D","^E","^I",13,"^G",11,"^F",163,"^[",true,"^H",163,"^J",["^K",["^L",["^K",[[]]]]],"^18","A convenience macro that pretty prints the last thing output. This is\nexactly equivalent to (pprint *1)."],"^1G","1.2","^7","~$cljs.pprint$macros/pp","^P",false,"^D","cljs/pprint.cljc","^I",13,"^Q",["^K",[["^13","^14"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",163,"^[",true,"^H",163,"^T",2,"^U",false,"^J",["^K",["^L",["^K",[[]]]]],"^18","A convenience macro that pretty prints the last thing output. This is\nexactly equivalent to (pprint *1)."],"~$process-directive-table-element",["^ ","^B",null,"^C",["^ ","^D","^E","^F",113,"^G",8,"^H",113,"^I",39,"^W",true,"^J",["^K",["^L",["^K",[[["~$char","~$params","~$flags","~$bracket-info","~$&","~$generator-fn"]]]]]]],"^W",true,"^7","~$cljs.pprint$macros/process-directive-table-element","^P",false,"^D","cljs/pprint.cljc","^I",39,"^Q",["^K",[["~$p__1622"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",113,"^H",113,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[[["^1J","^1K","^1L","^1M","~$&","^1N"]]]]]]],"~$formatter-out",["^ ","^B",null,"^C",["^ ","^D","^E","^F",143,"^G",11,"^H",143,"^I",24,"^[",true,"^J",["^K",["^L",["^K",[["~$format-in"]]]]],"^18","Makes a function which can directly run format-in. The function is\nfn [& args] ... and returns nil. This version of the formatter macro is\ndesigned to be used with *out* set to an appropriate Writer. In particular,\nthis is meant to be used as part of a pretty printer dispatch method.\n\nformat-in can be either a control string or a previously compiled format."],"^7","~$cljs.pprint$macros/formatter-out","^P",false,"^D","cljs/pprint.cljc","^I",24,"^Q",["^K",[["^13","^14","^1R"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",143,"^[",true,"^H",143,"^T",3,"^U",false,"^J",["^K",["^L",["^K",[["^1R"]]]]],"^18","Makes a function which can directly run format-in. The function is\nfn [& args] ... and returns nil. This version of the formatter macro is\ndesigned to be used with *out* set to an appropriate Writer. In particular,\nthis is meant to be used as part of a pretty printer dispatch method.\n\nformat-in can be either a control string or a previously compiled format."],"~$formatter",["^ ","^B",null,"^C",["^ ","^D","^E","^F",127,"^G",11,"^H",127,"^I",20,"^[",true,"^J",["^K",["^L",["^K",[["^1R"]]]]],"^18","Makes a function which can directly run format-in. The function is\nfn [stream & args] ... and returns nil unless the stream is nil (meaning\noutput to a string) in which case it returns the resulting string.\n\nformat-in can be either a control string or a previously compiled format."],"^7","~$cljs.pprint$macros/formatter","^P",false,"^D","cljs/pprint.cljc","^I",20,"^Q",["^K",[["^13","^14","^1R"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",127,"^[",true,"^H",127,"^T",3,"^U",false,"^J",["^K",["^L",["^K",[["^1R"]]]]],"^18","Makes a function which can directly run format-in. The function is\nfn [stream & args] ... and returns nil unless the stream is nil (meaning\noutput to a string) in which case it returns the resulting string.\n\nformat-in can be either a control string or a previously compiled format."],"~$with-pretty-writer",["^ ","^B",null,"^C",["^ ","^D","^E","^F",18,"^G",11,"^H",18,"^I",29,"^[",true,"^J",["^K",["^L",["^K",[["~$base-writer","~$&","^Y"]]]]],"^12",["^ ","^P",true,"^T",3,"^Q",[["^K",["^13","^14","^1W","^Y"]]],"^J",["^K",[["^13","^14","^1W","~$&","^Y"]]],"^S",["^K",[null]]]],"^7","~$cljs.pprint$macros/with-pretty-writer","^P",true,"^D","cljs/pprint.cljc","^I",29,"^12",["^ ","^P",true,"^T",3,"^Q",[["^K",["^13","^14","^1W","^Y"]]],"^J",["^K",[["^13","^14","^1W","~$&","^Y"]]],"^S",["^K",[null]]],"^Q",[["^K",["^13","^14","^1W","^Y"]]],"^R",null,"^S",["^K",[null]],"^G",1,"^F",18,"^[",true,"^H",18,"^T",3,"^U",false,"^J",["^K",[["^13","^14","^1W","~$&","^Y"]]]],"~$setf",["^ ","^B",null,"^C",["^ ","^D","^E","^F",35,"^G",11,"^H",35,"^I",15,"^[",true,"^J",["^K",["^L",["^K",[["^1A","~$new-val"]]]]],"^18","Set the value of the field SYM to NEW-VAL"],"^7","~$cljs.pprint$macros/setf","^P",false,"^D","cljs/pprint.cljc","^I",15,"^Q",["^K",[["^13","^14","^1A","^1Z"]]],"^R",null,"^S",["^K",[null,null]],"^G",1,"^F",35,"^[",true,"^H",35,"^T",4,"^U",false,"^J",["^K",["^L",["^K",[["^1A","^1Z"]]]]],"^18","Set the value of the field SYM to NEW-VAL"],"~$with-pprint-dispatch",["^ ","^B",null,"^C",["^ ","^D","^E","^I",31,"^12",["^ ","^P",true,"^T",3,"^Q",[["^K",["^13","^14","~$function","^Y"]]],"^J",["^K",[["^13","^14","^21","~$&","^Y"]]],"^S",["^K",[null]]],"^G",11,"^F",157,"^[",true,"^H",157,"^J",["^K",["^L",["^K",[["^21","~$&","^Y"]]]]],"^18","Execute body with the pretty print dispatch function bound to function."],"^7","~$cljs.pprint$macros/with-pprint-dispatch","^P",true,"^D","cljs/pprint.cljc","^I",31,"^12",["^ ","^P",true,"^T",3,"^Q",[["^K",["^13","^14","^21","^Y"]]],"^J",["^K",[["^13","^14","^21","~$&","^Y"]]],"^S",["^K",[null]]],"^Q",[["^K",["^13","^14","^21","^Y"]]],"^R",null,"^S",["^K",[null]],"^G",1,"^F",157,"^[",true,"^H",157,"^T",3,"^U",false,"^J",["^K",[["^13","^14","^21","~$&","^Y"]]],"^18","Execute body with the pretty print dispatch function bound to function."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ "],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~$&","~:suffix","~$cljs.core/<","~$-write","~$cljs.core/binding","~$cljs.pprint/*print-pprint-dispatch*","~$navigator__104__auto__","~$cljs.core/=","~$my-e-f__99__auto__","~$type-tag","~$new-writer__95__auto__","~$cljs.core/array-map","~$cljs.pprint/pretty-writer?","~$cljs.core/deref","~$cljs.core/hash-map","~$loop*","~:generator-fn","~$cljs.pprint/*current-level*","~$cljs.core/string?","~$cljs.core/*1","~$cljs.pprint/*print-miser-width*","~$stream__102__auto__","~$cljs.pprint/execute-format","~$cljs.core/defn-","~:params","~$fn","~$cljs.core/*out*","~$cljs.pprint/make-pretty-writer","~$do","~$this","~$offset","~$if","~:prefix","~$my-c-c__98__auto__","~$cljs.pprint/-ppflush","~$cljs.core/swap!","~$cljs.core/let","~$cljs.pprint/*print-right-margin*","~$cljs.core/*print-length*","^1K","~$cljs.core/defrecord","~$x__96__auto__","~$directive-table","~$cljs.core/loop","~$args__107__auto__","~$cljs.pprint/init-navigator","~$recur","~$my-i-n__100__auto__","~:per-line-prefix","~$cf__101__auto__","~$base-writer__94__auto__","~$cljs.core/fn","~$cljs.pprint/start-block","~$cljs.pprint/end-block","~$cljs.core/not","~$cljs.core/assoc","~$args__103__auto__","~$cljs.pprint/level-exceeded","~:bracket-info","~$cljs.pprint/pprint","~:flags","~:directive","~:type-tag","~$cljs.pprint/cached-compile","~$cf__106__auto__","~$cljs.core/or","~$navigator__108__auto__","~$format-in__105__auto__","~$format-in__97__auto__","~$cljs.core/inc","~$def","~$cljs.pprint/*current-length*"]],"~:order",["^2Z","^3;","^2@","^3?","^2B","^2:","^2P","^2U","^2Q","^2[","^2J","^2X","^2C","^2S","^2Y","^3@","^2R","^31","^2?","^2M","^32","^2=","^3G","^2V","^39","^27","^3B","^29","^2G","^3N","^3P","^3=","^3>","^2E","^37","^34","^3J","^30","^28","^3F","^2N","^3E","^3C","^2F","^2A","^2O","^1K","^2T","^3O","^33","^2D","^3M","^2W","^3H","^2>","^2L","^38","^36","^3:","^2H","^3<","^2K","~$&","^3A","^2<","^3L","^3I","^35","^3K","^2;","^3D","^2I"]],"^18",null]