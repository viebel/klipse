["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",["~$all-ns","~$ns-interns","~$ns-resolve","~$resolve","~$find-ns","~$ns-publics","~$remove-ns"]],"~:name","~$cljs.analyzer.api","~:imports",null,"~:requires",["^ ","~$env","~$cljs.env","^C","^C","~$ana","~$cljs.analyzer","^E","^E"],"~:uses",null,"~:defs",["^ ","~$with-state",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","^?","~:line",25,"~:column",11,"~:end-line",25,"~:end-column",21,"~:macro",true,"~:arglists",["~#list",["~$quote",["^R",[["~$state","~$body"]]]]],"~:doc","Run the body with the given compilation state Atom<Map>."],"^>","~$cljs.analyzer.api/with-state","~:variadic",false,"^K","cljs/analyzer/api.cljc","^O",21,"~:method-params",["^R",[["~$&form","~$&env","^T","^U"]]],"~:protocol-impl",null,"~:arglists-meta",["^R",[null,null]],"^M",1,"^L",25,"^P",true,"^N",25,"~:max-fixed-arity",4,"~:fn-var",false,"^Q",["^R",["^S",["^R",[["^T","^U"]]]]],"^V","Run the body with the given compilation state Atom<Map>."],"^;",["^ ","^I",null,"^J",["^ ","^K","^?","^L",163,"^M",7,"^N",163,"^O",14,"^Q",["^R",["^S",["^R",[["~$sym"],["^T","^14"]]]]],"^V","Given a namespace return the corresponding namespace analysis map. Analagous\n  to clojure.core/find-ns.","~:top-fn",["^ ","^X",false,"^12",2,"^Y",["^R",[["^14"],["^T","^14"]]],"^Q",["^R",[["^14"],["^T","^14"]]],"^11",["^R",[null,null]]]],"^>","~$cljs.analyzer.api/find-ns","^X",false,"^K","cljs/analyzer/api.cljc","^O",14,"^15",["^ ","^X",false,"^12",2,"^Y",["^R",[["^14"],["^T","^14"]]],"^Q",["^R",[["^14"],["^T","^14"]]],"^11",["^R",[null,null]]],"^Y",["^R",[["^14"],["^T","^14"]]],"^10",null,"^11",["^R",[null,null]],"^M",1,"^L",163,"^N",163,"^12",2,"^13",true,"^Q",["^R",[["^14"],["^T","^14"]]],"^V","Given a namespace return the corresponding namespace analysis map. Analagous\n  to clojure.core/find-ns."],"^=",["^ ","^I",null,"^J",["^ ","^K","^?","^L",205,"^M",7,"^N",205,"^O",16,"^Q",["^R",["^S",["^R",[["~$ns"],["^T","^17"]]]]],"^V","Removes the namespace named by the symbol.","^15",["^ ","^X",false,"^12",2,"^Y",["^R",[["^17"],["^T","^17"]]],"^Q",["^R",[["^17"],["^T","^17"]]],"^11",["^R",[null,null]]]],"^>","~$cljs.analyzer.api/remove-ns","^X",false,"^K","cljs/analyzer/api.cljc","^O",16,"^15",["^ ","^X",false,"^12",2,"^Y",["^R",[["^17"],["^T","^17"]]],"^Q",["^R",[["^17"],["^T","^17"]]],"^11",["^R",[null,null]]],"^Y",["^R",[["^17"],["^T","^17"]]],"^10",null,"^11",["^R",[null,null]],"^M",1,"^L",205,"^N",205,"^12",2,"^13",true,"^Q",["^R",[["^17"],["^T","^17"]]],"^V","Removes the namespace named by the symbol."],"^<",["^ ","^I",null,"^J",["^ ","^K","^?","^L",183,"^M",7,"^N",183,"^O",17,"^Q",["^R",["^S",["^R",[["^17"],["^T","^17"]]]]],"^V","Given a namespace return all the public var analysis maps. Analagous to\n  clojure.core/ns-publics but returns var analysis maps not vars.","^15",["^ ","^X",false,"^12",2,"^Y",["^R",[["^17"],["^T","^17"]]],"^Q",["^R",[["^17"],["^T","^17"]]],"^11",["^R",[null,null]]]],"^>","~$cljs.analyzer.api/ns-publics","^X",false,"^K","cljs/analyzer/api.cljc","^O",17,"^15",["^ ","^X",false,"^12",2,"^Y",["^R",[["^17"],["^T","^17"]]],"^Q",["^R",[["^17"],["^T","^17"]]],"^11",["^R",[null,null]]],"^Y",["^R",[["^17"],["^T","^17"]]],"^10",null,"^11",["^R",[null,null]],"^M",1,"^L",183,"^N",183,"^12",2,"^13",true,"^Q",["^R",[["^17"],["^T","^17"]]],"^V","Given a namespace return all the public var analysis maps. Analagous to\n  clojure.core/ns-publics but returns var analysis maps not vars."],"~$get-options",["^ ","^I",null,"^J",["^ ","^K","^?","^L",55,"^M",7,"^N",55,"^O",18,"^Q",["^R",["^S",["^R",[[],["^T"]]]]],"^V","Return the compiler options from compiler state.","^15",["^ ","^X",false,"^12",1,"^Y",["^R",[[],["^T"]]],"^Q",["^R",[[],["^T"]]],"^11",["^R",[null,null]]]],"^>","~$cljs.analyzer.api/get-options","^X",false,"^K","cljs/analyzer/api.cljc","^O",18,"^15",["^ ","^X",false,"^12",1,"^Y",["^R",[[],["^T"]]],"^Q",["^R",[[],["^T"]]],"^11",["^R",[null,null]]],"^Y",["^R",[[],["^T"]]],"^10",null,"^11",["^R",[null,null]],"^M",1,"^L",55,"^N",55,"^12",1,"^13",true,"^Q",["^R",[[],["^T"]]],"^V","Return the compiler options from compiler state."],"~$in-cljs-user",["^ ","^I",null,"^J",["^ ","^K","^?","^O",23,"^15",["^ ","^X",true,"^12",3,"^Y",[["^R",["^Z","^[","^B","^U"]]],"^Q",["^R",[["^Z","^[","^B","~$&","^U"]]],"^11",["^R",[null]]],"^M",11,"^L",213,"^P",true,"^N",213,"^Q",["^R",["^S",["^R",[["^B","~$&","^U"]]]]],"^V","Binds cljs.analyzer/*cljs-ns* to 'cljs.user and uses the given compilation\n  environment atom and runs body."],"^>","~$cljs.analyzer.api/in-cljs-user","^X",true,"^K","cljs/analyzer/api.cljc","^O",23,"^15",["^ ","^X",true,"^12",3,"^Y",[["^R",["^Z","^[","^B","^U"]]],"^Q",["^R",[["^Z","^[","^B","~$&","^U"]]],"^11",["^R",[null]]],"^Y",[["^R",["^Z","^[","^B","^U"]]],"^10",null,"^11",["^R",[null]],"^M",1,"^L",213,"^P",true,"^N",213,"^12",3,"^13",false,"^Q",["^R",[["^Z","^[","^B","~$&","^U"]]],"^V","Binds cljs.analyzer/*cljs-ns* to 'cljs.user and uses the given compilation\n  environment atom and runs body."],"~$warning-enabled?",["^ ","^I",null,"^J",["^ ","^K","^?","^L",43,"^M",7,"^N",43,"^O",23,"^Q",["^R",["^S",["^R",[["~$warning-type"]]]]],"^V","Test if the given warning-type is enabled."],"^>","~$cljs.analyzer.api/warning-enabled?","^X",false,"^K","cljs/analyzer/api.cljc","^O",23,"^Y",["^R",[["^1?"]]],"^10",null,"^11",["^R",[null,null]],"^M",1,"^L",43,"^N",43,"^12",1,"^13",true,"^Q",["^R",["^S",["^R",[["^1?"]]]]],"^V","Test if the given warning-type is enabled."],"^9",["^ ","^I",null,"^J",["^ ","^K","^?","^L",196,"^M",7,"^N",196,"^O",17,"^Q",["^R",["^S",["^R",[["^17","^14"],["^T","^17","^14"]]]]],"^V","Given a namespace and a symbol return the corresponding var analysis map.\n  Analagous to clojure.core/ns-resolve but returns var analysis map not Var.","^15",["^ ","^X",false,"^12",3,"^Y",["^R",[["^17","^14"],["^T","^17","^14"]]],"^Q",["^R",[["^17","^14"],["^T","^17","^14"]]],"^11",["^R",[null,null]]]],"^>","~$cljs.analyzer.api/ns-resolve","^X",false,"^K","cljs/analyzer/api.cljc","^O",17,"^15",["^ ","^X",false,"^12",3,"^Y",["^R",[["^17","^14"],["^T","^17","^14"]]],"^Q",["^R",[["^17","^14"],["^T","^17","^14"]]],"^11",["^R",[null,null]]],"^Y",["^R",[["^17","^14"],["^T","^17","^14"]]],"^10",null,"^11",["^R",[null,null]],"^M",1,"^L",196,"^N",196,"^12",3,"^13",true,"^Q",["^R",[["^17","^14"],["^T","^17","^14"]]],"^V","Given a namespace and a symbol return the corresponding var analysis map.\n  Analagous to clojure.core/ns-resolve but returns var analysis map not Var."],"~$empty-state",["^ ","^I",null,"^J",["^ ","^K","^?","^L",20,"^M",7,"^N",20,"^O",18,"^Q",["^R",["^S",["^R",[[]]]]],"^V","Creates an empty compilation state Atom<Map>."],"^>","~$cljs.analyzer.api/empty-state","^X",false,"^K","cljs/analyzer/api.cljc","^O",18,"^Y",["^R",[[]]],"^10",null,"^11",["^R",[null,null]],"^M",1,"^L",20,"^N",20,"^12",0,"^13",true,"^Q",["^R",["^S",["^R",[[]]]]],"^V","Creates an empty compilation state Atom<Map>."],"~$no-warn",["^ ","^I",null,"^J",["^ ","^K","^?","^O",18,"^15",["^ ","^X",true,"^12",2,"^Y",[["^R",["^Z","^[","^U"]]],"^Q",["^R",[["^Z","^[","~$&","^U"]]],"^11",["^R",[null]]],"^M",11,"^L",36,"^P",true,"^N",36,"^Q",["^R",["^S",["^R",[["~$&","^U"]]]]],"^V","Disable analyzer warnings for any analysis executed in body."],"^>","~$cljs.analyzer.api/no-warn","^X",true,"^K","cljs/analyzer/api.cljc","^O",18,"^15",["^ ","^X",true,"^12",2,"^Y",[["^R",["^Z","^[","^U"]]],"^Q",["^R",[["^Z","^[","~$&","^U"]]],"^11",["^R",[null]]],"^Y",[["^R",["^Z","^[","^U"]]],"^10",null,"^11",["^R",[null]],"^M",1,"^L",36,"^P",true,"^N",36,"^12",2,"^13",false,"^Q",["^R",[["^Z","^[","~$&","^U"]]],"^V","Disable analyzer warnings for any analysis executed in body."],"~$empty-env",["^ ","^I",null,"^J",["^ ","^K","^?","^L",31,"^M",7,"^N",31,"^O",16,"^Q",["^R",["^S",["^R",[[]]]]],"^V","Creates an empty analysis environment."],"^>","~$cljs.analyzer.api/empty-env","^X",false,"^K","cljs/analyzer/api.cljc","^O",16,"^Y",["^R",[[]]],"^10",null,"^11",["^R",[null,null]],"^M",1,"^L",31,"^N",31,"^12",0,"^13",true,"^Q",["^R",["^S",["^R",[[]]]]],"^V","Creates an empty analysis environment."],"~$default-warning-handler",["^ ","^I",null,"^J",["^ ","^K","^?","^L",48,"^M",7,"^N",48,"^O",30,"^Q",["^R",["^S",["^R",[["^1?","^B","~$extra"]]]]],"^V","The default warning handler.\n\n   Outputs the warning messages to *err*."],"^>","~$cljs.analyzer.api/default-warning-handler","^X",false,"^K","cljs/analyzer/api.cljc","^O",30,"^Y",["^R",[["^1?","^B","^1I"]]],"^10",null,"^11",["^R",[null,null]],"^M",1,"^L",48,"^N",48,"^12",3,"^13",true,"^Q",["^R",["^S",["^R",[["^1?","^B","^1I"]]]]],"^V","The default warning handler.\n\n   Outputs the warning messages to *err*."],"^8",["^ ","^I",null,"^J",["^ ","^K","^?","^L",172,"^M",7,"^N",172,"^O",17,"^Q",["^R",["^S",["^R",[["^17"],["^T","^17"]]]]],"^V","Given a namespace return all the var analysis maps. Analagous to\n  clojure.core/ns-interns but returns var analysis maps not vars.","^15",["^ ","^X",false,"^12",2,"^Y",["^R",[["^17"],["^T","^17"]]],"^Q",["^R",[["^17"],["^T","^17"]]],"^11",["^R",[null,null]]]],"^>","~$cljs.analyzer.api/ns-interns","^X",false,"^K","cljs/analyzer/api.cljc","^O",17,"^15",["^ ","^X",false,"^12",2,"^Y",["^R",[["^17"],["^T","^17"]]],"^Q",["^R",[["^17"],["^T","^17"]]],"^11",["^R",[null,null]]],"^Y",["^R",[["^17"],["^T","^17"]]],"^10",null,"^11",["^R",[null,null]],"^M",1,"^L",172,"^N",172,"^12",2,"^13",true,"^Q",["^R",[["^17"],["^T","^17"]]],"^V","Given a namespace return all the var analysis maps. Analagous to\n  clojure.core/ns-interns but returns var analysis maps not vars."],"^7",["^ ","^I",null,"^J",["^ ","^K","^?","^L",155,"^M",7,"^N",155,"^O",13,"^Q",["^R",["^S",["^R",[[],["^T"]]]]],"^V","Return all namespaces. Analagous to clojure.core/all-ns but\n  returns symbols identifying namespaces not Namespace instances.","^15",["^ ","^X",false,"^12",1,"^Y",["^R",[[],["^T"]]],"^Q",["^R",[[],["^T"]]],"^11",["^R",[null,null]]]],"^>","~$cljs.analyzer.api/all-ns","^X",false,"^K","cljs/analyzer/api.cljc","^O",13,"^15",["^ ","^X",false,"^12",1,"^Y",["^R",[[],["^T"]]],"^Q",["^R",[[],["^T"]]],"^11",["^R",[null,null]]],"^Y",["^R",[[],["^T"]]],"^10",null,"^11",["^R",[null,null]],"^M",1,"^L",155,"^N",155,"^12",1,"^13",true,"^Q",["^R",[[],["^T"]]],"^V","Return all namespaces. Analagous to clojure.core/all-ns but\n  returns symbols identifying namespaces not Namespace instances."],"^:",["^ ","^I",null,"^J",["^ ","^K","^?","^L",144,"^M",7,"^N",144,"^O",14,"^Q",["^R",["^S",["^R",[["^B","^14"]]]]],"^V","Given an analysis environment resolve a var. Analogous to\n   clojure.core/resolve"],"^>","~$cljs.analyzer.api/resolve","^X",false,"^K","cljs/analyzer/api.cljc","^O",14,"^Y",["^R",[["^B","^14"]]],"^10",null,"^11",["^R",[null,null]],"^M",1,"^L",144,"^N",144,"^12",2,"^13",true,"^Q",["^R",["^S",["^R",[["^B","^14"]]]]],"^V","Given an analysis environment resolve a var. Analogous to\n   clojure.core/resolve"],"~$get-js-index",["^ ","^I",null,"^J",["^ ","^K","^?","^L",61,"^M",7,"^N",61,"^O",19,"^Q",["^R",["^S",["^R",[[],["^T"]]]]],"^V","Return the currently computed Google Closure js dependency index from the\n  compiler state.","^15",["^ ","^X",false,"^12",1,"^Y",["^R",[[],["^T"]]],"^Q",["^R",[[],["^T"]]],"^11",["^R",[null,null]]]],"^>","~$cljs.analyzer.api/get-js-index","^X",false,"^K","cljs/analyzer/api.cljc","^O",19,"^15",["^ ","^X",false,"^12",1,"^Y",["^R",[[],["^T"]]],"^Q",["^R",[[],["^T"]]],"^11",["^R",[null,null]]],"^Y",["^R",[[],["^T"]]],"^10",null,"^11",["^R",[null,null]],"^M",1,"^L",61,"^N",61,"^12",1,"^13",true,"^Q",["^R",[[],["^T"]]],"^V","Return the currently computed Google Closure js dependency index from the\n  compiler state."]],"~:require-macros",["^ "],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:cljs.analyzer/namespaces","~$cljs.core/binding","~:private","~:macros","~:js-dependency-index","~$cljs.analyzer/*cljs-warnings*","^G","~$cljs.env/with-compiler-env","~:options","^S","~$cljs.analyzer/*cljs-ns*","~$cljs.user"]],"~:order",["^1Y","^1T","^1X","^1Z","^1W","^1S","^1V","^G","^1U","^1[","^S","^20"]],"^V","This is intended to be a stable api for those who need programmatic access\n  to the analyzer."]